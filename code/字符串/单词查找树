//#include<bits/stdc++.h>
//using namespace std;
//const int maxn=3004;
//struct node{
//    int id,t,y,s;
//    friend bool operator<(node a, node b){
//        if(a.y!=b.y)return a.y< b.y;
//        else if(a.s!=b.s)return a.s> b.s;
//        else return a.t> b.t;
//    }
//};
//int vis[maxn],ans[maxn];
//priority_queue<node>v[3004];
//int main(){
//    int n,m,p,a,b,c,d;
//    cin>>n>>m>>p;
//    for(int i=1;i<=p;i++){
//        scanf("%d%d%d%d",&a,&b,&c,&d);
//        v[a].push(node{i,b,c,d});
//    }
//    int cnt=p;
//    int timee=0;
//    while(1){
//        timee++;
//        if(p==0)break;
//        for(int i=1;i<=m;i++){
//            if(p==0)break;
//            int minn=0x3f3f3f3f,t,tt;
//            if(vis[i]!=timee&&vis[i])continue;
//            for(int j=1;j<=n;j++){
//                if(v[j].empty())continue;
//                node u=v[j].top();
//                if(u.s<minn){
//                    minn=u.s;
//                    t=u.id;
//                    tt=j;
//                }
//            }
//            //cout<<i<<' '<<t<<endl;
//            v[tt].pop();
//            p--;
//            vis[i]=ans[t]=minn+timee;
//            cout<<t<<' '<<ans[t]<<endl;
//        }
//    }
//    for(int i=1;i<=cnt;i++)printf("%d\n",ans[i]);
//    return 0;
//}
#include<bits/stdc++.h>
using namespace std;
const int tot=100003;
const int maxn=100003;
int used[maxn];
struct ac{
    struct aa{//next是该点的下个节点的节点序号
        int next[26],fail,cnt;//fail是其他路中这个字母的节点序号
    }state[tot];//cnt是这串字符中到该点有多少字符
    int sizee;//字典树的节点个数
    queue<int>q;

    void init(){
        while(!q.empty())q.pop();
        for(int i=0;i<tot;i++){
            memset(state[i].next,0,sizeof(state[i].next));
            state[i].fail=state[i].cnt=0;
        }
        sizee=1;
    }

    void insertt(char *s){
        int n=strlen(s),now=0;
        for(int i=0;i<n;i++){
            char c=s[i];
            if(!state[now].next[c-'A'])state[now].next[c-'A']=sizee++;
            now=state[now].next[c-'A'];
        }
        //state[now]=id;
        state[now].cnt++;
    }

    void build(){
        state[0].fail=-1;
        q.push(0);
        while(q.size()){
            int u=q.front();
            q.pop();
            for(int i=0;i<26;i++){
                if(state[u].next[i]){
                    if(u==0)state[state[u].next[i]].fail=0;
                    else{
                        int v=state[u].fail;
                        while(v!=-1){
                            if(state[v].next[i]){
                                state[state[u].next[i]].fail=state[v].next[i];
                                break;
                            }
                            v=state[v].fail;
                        }
                        if(v==-1)state[state[u].next[i]].fail=0;
                    }
                    q.push(state[u].next[i]);
                }
            }
        }
    }
}aho;
char S[70];
int main(){
    aho.init();
    while(~scanf("%s",S))aho.insertt(S);
    aho.build();
    cout<<aho.sizee<<endl;
}
