#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cstring>
#include<iostream>
using namespace std;
typedef long long ll;
const ll maxn = 1e5 + 5;
int val[maxn];
struct node{
	ll l, r, val,mi;
}st[maxn << 2];
ll lazy[maxn << 2];
void pushdown(ll h){
	if(st[h].l!=st[h].r)lazy[h<<1]=lazy[h<<1|1]=lazy[h];
	st[h].val-=lazy[h]*(st[h].r-st[h].l+1);
	st[h].mi-=lazy[h],lazy[h]=0;
}

void build(ll l, ll r, ll h){
	st[h].l = l;
	st[h].r = r;
	lazy[h]=0;
	if (l == r){st[h].val =st[h].mi= val[l];return;}
	ll mid = (r + l) >> 1;
	build(l, mid, h << 1);
    build(mid + 1, r, h << 1 | 1);
    st[h].val = st[h << 1].val + st[h << 1 | 1].val;
    st[h].mi=min(st[h<<1].mi,st[h<<1|1].mi);
}

void update(ll l, ll r, ll h, ll k){
    if(lazy[h])pushdown(h);
	if (st[h].l >= l && st[h].r <= r){
        lazy[h]=k;
        pushdown(h);
        return;
	}
	ll mid = (st[h].l + st[h].r) >> 1;
    if (mid >= r) update(l, r, h * 2, k);
	else if (mid < l) update(l, r, h * 2 + 1, k);
	else{
		update(l, mid, h * 2, k);
		update(mid + 1, r, h * 2 + 1, k);
	}
	st[h].val = st[h << 1].val + st[h << 1 | 1].val;
	st[h].mi=min(st[h<<1].mi,st[h<<1|1].mi);
}
ll query(ll l, ll r, ll h){
    if(lazy[h])pushdown(h);
	if (st[h].l >= l && st[h].r <= r)return st[h].mi;
	ll mid = (st[h].l + st[h].r) >> 1,res;
	if (mid >= r)res = query(l, r,h<<1);
	else if (mid < l)res = query(l, r, h<<1|1);
	else res = min(query(l, mid, h<<1), query(mid + 1, r,h<<1|1));
    return res;
}
int main(){
	int t,n,k;
	cin>>t;
	while(t--){
        scanf("%d%d",&n,&k);
        for(int i=1;i<=n;i++)scanf("%d",&val[i]);
        build(1,n,1);
        int i = 1, ans = 0,now;
		while (1){
			while (i + k - 1 <= n && (now = query(i, i + k - 1, 1)) <= 0)i++;
			if (i + k - 1 > n) break;
			ans += now;
			update(i, i + k - 1, 1, now);
		}
		printf("%d\n", ans);
	}
	return 0;
}
